{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Header/Header.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.jsx","components/Navbar/Navbar.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/Profile.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","nav","item","active","header","content","img","Header","react_default","a","createElement","className","s","src","console","log","concat","Navbar","Post","MyPosts","posts","MyPosts_Post_Post","Profile","Profile_MyPosts_MyPosts","App","components_Header_Header","components_Navbar_Navbar","components_Profile_Profile","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,IAAA,oBAAAC,KAAA,qBAAAC,OAAA,2CCAlBJ,EAAAC,QAAA,CAAkBI,OAAA,yCCAlBL,EAAAC,QAAA,CAAkBK,QAAA,yBAAAC,IAAA,yDCAlBP,EAAAC,QAAA,CAAkBE,KAAA,oMCOHK,EANA,WACX,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAER,QACxBI,EAAAC,EAAAC,cAAA,OAAKG,IAAI,mHCFjBC,QAAQC,IAAIH,KAWE,GAAAI,OAAMJ,IAAEV,KAAR,KAAAc,OAHL,UADT,IA0BmBC,EApBJ,WACX,OAAOT,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,IAAEX,KACtBO,EAAAC,EAAAC,cAAA,OAAKC,UAAaC,IAAEV,MAChBM,EAAAC,EAAAC,cAAA,qBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,GAAAK,OAAKJ,IAAEV,KAAP,KAAAc,OAAeJ,IAAET,SAC3BK,EAAAC,EAAAC,cAAA,qBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEV,MACdM,EAAAC,EAAAC,cAAA,kBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEV,MACdM,EAAAC,EAAAC,cAAA,mBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEV,MACdM,EAAAC,EAAAC,cAAA,wEChBGQ,EAXF,WACT,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEV,MACdM,EAAAC,EAAAC,cAAA,OAAKG,IAAI,iEADb,SAGAL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBCgBGS,EArBC,WACZ,OACIX,EAAAC,EAAAC,cAAA,qBAEAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,2BAGAF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEQ,OACdZ,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACW,EAAD,SCDGC,EAdC,WACZ,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEP,SACdG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKG,IAAI,mGAEbL,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAACa,EAAD,QCCGC,EATH,WACV,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94a64ae4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3J9hL\",\"item\":\"Navbar_item__RY5Yx\",\"active\":\"Navbar_active__3BMUr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1EzZc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1I6_P\",\"img\":\"Profile_img__Pfai2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__gG8ny\"};","import React from 'react';\r\nimport s from './Header.module.css';\r\nconst Header = () => {\r\n    return <header className={s.header}>\r\n        <img src='https://icon-library.net/images/world-of-warcraft-icon-png/world-of-warcraft-icon-png-18.jpg' />\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from \"./Navbar.module.css\";\r\nconsole.log(s);\r\n//let s = {\r\n//'nav': 'Navbar_nav__vn7qF',\r\n//'item': 'Navbar_item__31T2p'\r\n// 'active': 'navbar and other';\r\n//}\r\n\r\nlet c1 = \"item\";\r\nlet c2 = \"active\";\r\n//\"item active\"\r\nlet classes = \"c1\"+ \"\" +\"c2\";\r\nlet classesNew = `${s.item} ${c2}`\r\n\r\nconst Navbar = () => {\r\n    return <nav className ={s.nav}>\r\n        <div className = {s.item}>\r\n            <a>Profile</a>\r\n        </div>\r\n        <div className={`${s.item} ${s.active}`}>\r\n            <a>Message</a>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>News</a>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>Music</a>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>Settings</a>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\n    export default Navbar;\r\n","import React from 'react';\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post = () => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://wow.zamimg.com/uploads/screenshots/normal/875653.jpg' />\r\n            post 1\r\n        <div>\r\n            <span>like</span>\r\n        </div>\r\n        </div>\r\n           )\r\n}\r\nexport default Post;","import React from 'react';\r\nimport s from'./MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nconst MyPosts = () => {\r\n    return (\r\n        <div>\r\n           MyPosts\r\n        <div>\r\n        <textarea></textarea>\r\n        <button>Add Post</button>\r\n\r\n        </div>\r\n        <div className={s.posts}>\r\n            <Post/>\r\n            <Post/>\r\n            <Post/>\r\n            <Post/>\r\n            <Post/>\r\n            <Post/>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MyPosts;","import React from 'react';\r\nimport s from \"./Profile.module.css\";\r\nimport MyPosts from './MyPosts/MyPosts';\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div className={s.content}>\r\n            <div>\r\n                <img src='https://wowmoon.ru/wp-content/uploads/2018/08/122058-World-of-Warcraft-Battle-for-Azeroth.jpg' />\r\n            </div>\r\n            <div>\r\n                ava + description\r\n        </div>\r\n            <MyPosts />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Navbar from './components/Navbar/Navbar';\nimport Profile from './components/Profile/Profile';\nconst App = () => {\n  return (\n    <div className='app-wrapper'>\n      <Header />\n      <Navbar />\n      <Profile />\n    </div>);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}